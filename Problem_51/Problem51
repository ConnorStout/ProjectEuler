def getPrimes(n):


    prevPrimes = []
    count = 2
    while(len(prevPrimes) < n):
        check = True
        for x in prevPrimes:
            if count%x == 0:
                check = False
                break

        if check == True:
            prevPrimes.append(count)

        count+=1
    return prevPrimes

def generateCombos(length):
        return list(range(0,2**length))





def getCombos(length):
    gened = list(range(0, (2 ** length)-1))
    array = []
    for x in gened:
        array = array + [str(bin(x))[2:]]
    return array
def getComboArr(value,insert):
    length = len(str(value))
    combos = getCombos(length)


    totalArr = []
    for binary in combos:
        newAdd = ''
        thisValue = str(value)
        count = 0
        for bit in binary[::-1]:
            if(bit == '0'):
                newAdd = str(insert) + newAdd
            else:

                newValue = list(thisValue)
                newValue[count] = str(insert)

                thisValue = "".join(newValue)
            count = count + 1
        totalArr = totalArr + [thisValue]



    return (totalArr)


primes = getPrimes(1000)

for x in primes:
    for y in range(1,10):
        combos = getComboArr(x, y)
        combos = list(set(combos))

        numPrimes = 0

        for z in combos:
            if (primes.__contains__(int(z))):
                numPrimes = numPrimes + 1
        if(numPrimes == 8):
            print(x)
            break





